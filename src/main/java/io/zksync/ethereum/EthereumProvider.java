package io.zksync.ethereum;

import java.math.BigInteger;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.web3j.protocol.core.methods.response.TransactionReceipt;

import io.zksync.domain.token.Token;

public interface EthereumProvider {

    /**
     * Send approve transaction to token contract.
     * 
     * @param token - Token object supported by ZkSync
     * @param limit - Maximum amount to approve for ZkSync contract
     * @return CompletableFuture for waiting for transaction mine
     */
    CompletableFuture<TransactionReceipt> approveDeposits(Token token, Optional<BigInteger> limit);

    /**
     * Send transfer transaction. This is the regular transfer of ERC20 token
     * 
     * @param token - Token object supported by ZkSync
     * @param amount - Amount tokens to transfer
     * @param to - Address of receiver tokens
     * @return CompletableFuture for waiting for transaction mine
     */
    CompletableFuture<TransactionReceipt> transfer(Token token, BigInteger amount, String to);

    /**
     * Send deposit transaction to ZkSync. For ERC20 token must be approved before. @see EthereumProvider.approveDepodits
     * 
     * @param token - Token object supported by ZkSync
     * @param amount - Amount tokens to transfer
     * @param userAddress - Address of L2 receiver deposit in ZkSync
     * @return CompletableFuture for waiting for transaction mine
     */
    CompletableFuture<TransactionReceipt> deposit(Token token, BigInteger amount, String userAddress);

    /**
     * Return back deposit by token. 
     * 
     * @param token - Token object supported by ZkSync
     * @param accountId - Id of account in ZkSync
     * @return CompletableFuture for waiting for transaction mine
     */
    CompletableFuture<TransactionReceipt> fullExit(Token token, Integer accountId);

    /**
     * Setup L2 public key hash for specific nonce
     * 
     * @param pubKeyhash - Public key hash generated by ZkSigner
     * @param nonce - Nonce value of account
     * @return CompletableFuture for waiting for transaction mine
     */
    CompletableFuture<TransactionReceipt> setAuthPubkeyHash(String pubKeyhash, BigInteger nonce);

    /**
     * Check if deposit is approved in enough amount
     * 
     * @param token - Token object supported by ZkSync
     * @param threshold - Minimum threshold of approved tokens
     * @return CompletableFuture of blockchain smart-contract call
     */
    CompletableFuture<Boolean> isDepositApproved(Token token, Optional<BigInteger> threshold);

    /**
     * Check if public key hash set for specific nonce
     * 
     * @param nonce - Nonce value of account
     * @return CompletableFuture of blockchain smart-contract call
     */
    CompletableFuture<Boolean> isOnChainAuthPubkeyHashSet(BigInteger nonce);

    /**
     * Get balance of account in Etereum
     * 
     * @return CompletableFuture of blockchain call
     */
    CompletableFuture<BigInteger> getBalance();

    /**
     * Get current nonce of account
     * 
     * @return CompletableFuture of blockchain call
     */
    CompletableFuture<BigInteger> getNonce();

    /**
     * Get ZkSync smart-contract address in Ethereum blockchain
     * 
     * @return Contract address in hex string
     */
    String contractAddress();

}
